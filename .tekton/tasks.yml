---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: cleanup
spec:
  description: This task cleans up a workspace by deleting all files.
  workspaces:
    - name: source
  steps:
    - name: remove
      image: alpine:3
      workingDir: $(workspaces.source.path)
      securityContext:
        runAsNonRoot: false
        runAsUser: 0
      env:
        - name: WORKSPACE_SOURCE_PATH
          value: $(workspaces.source.path)
      script: |
        #!/usr/bin/env sh
        set -eu
        echo "Removing all files from ${WORKSPACE_SOURCE_PATH} ..."
        # Delete any existing contents of the directory if it exists.
        #
        # We don't just "rm -rf ${WORKSPACE_SOURCE_PATH}" because ${WORKSPACE_SOURCE_PATH} might be "/"
        # or the root of a mounted volume.
        if [ -d "${WORKSPACE_SOURCE_PATH}" ] ; then
          # Delete non-hidden files and directories
          rm -rf "${WORKSPACE_SOURCE_PATH:?}"/*
          # Delete files and directories starting with . but excluding ..
          rm -rf "${WORKSPACE_SOURCE_PATH}"/.[!.]*
          # Delete files and directories starting with .. plus any other character
          rm -rf "${WORKSPACE_SOURCE_PATH}"/..?*
        fi
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: run-nose-tests
spec:
  workspaces:
    - name: source
  params:
    - name: args
      description: Arguments to pass to nosetests
      type: string
      default: "-v"
  steps:
    - name: install-and-test
      image: python:3.9-slim
      workingDir: $(workspaces.source.path)
      script: |
        #!/bin/bash
        set -e
        python -m pip install --upgrade pip wheel
        pip install -r requirements.txt
        nosetests $(params.args)
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: buildah
spec:
  params:
    - name: IMAGE
      type: string
      description: Image to build and push (pilns nosaukums, piem. docker.io/lietotajs/my-app:tag)
    - name: BUILDER_IMAGE
      type: string
      description: Builder image for buildah
      default: registry.redhat.io/rhel8/buildah@sha256:55f5c7d88c77e1ab5a2ab8e877172b2b66cb196e21f10dc45148470d0ee8bbae
    - name: SKIP_PUSH
      type: string
      description: If true, skip pushing image
      default: "false"
  workspaces:
    - name: source
    - name: dockerconfig
      optional: true
  steps:
    - name: build
      image: $(params.BUILDER_IMAGE)
      workingDir: $(workspaces.source.path)
      script: |
        #!/bin/sh
        set -e

        echo "Building image $(params.IMAGE)..."
        buildah bud -f Dockerfile -t $(params.IMAGE) $(workspaces.source.path)

        if [ "$(params.SKIP_PUSH)" != "true" ]; then
          echo "Pushing image $(params.IMAGE)..."
          if [ -d "$(workspaces.dockerconfig.path)/.docker" ]; then
            echo "Using dockerconfig for authentication"
            export REGISTRY_AUTH_FILE=$(workspaces.dockerconfig.path)/config.json
          fi
          buildah push $(params.IMAGE)
        else
          echo "Skipping image push"
        fi

